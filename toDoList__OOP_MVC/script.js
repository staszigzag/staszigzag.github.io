!function(C){var t={};function g(I){if(t[I])return t[I].exports;var Q=t[I]={i:I,l:!1,exports:{}};return C[I].call(Q.exports,Q,Q.exports,g),Q.l=!0,Q.exports}g.m=C,g.c=t,g.d=function(C,t,I){g.o(C,t)||Object.defineProperty(C,t,{enumerable:!0,get:I})},g.r=function(C){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(C,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(C,"__esModule",{value:!0})},g.t=function(C,t){if(1&t&&(C=g(C)),8&t)return C;if(4&t&&"object"==typeof C&&C&&C.__esModule)return C;var I=Object.create(null);if(g.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:C}),2&t&&"string"!=typeof C)for(var Q in C)g.d(I,Q,function(t){return C[t]}.bind(null,Q));return I},g.n=function(C){var t=C&&C.__esModule?function(){return C.default}:function(){return C};return g.d(t,"a",t),t},g.o=function(C,t){return Object.prototype.hasOwnProperty.call(C,t)},g.p="",g(g.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/helpers.js\nclass Observer {   // реализация патерна наблюдатель\r\n    constructor() {\r\n        this._events = {}; //список для хранения  событий и методов\r\n    }\r\n\r\n    subscribe(eventName, listener) { //подписка на события, принимает тип события и функцию обработчик которая будет вызываться, когда будет инициироваться событие с этим типом\r\n        this._events[eventName] = this._events[eventName] || []; // проверка \r\n        this._events[eventName].push(listener); // добавить функцию колбэк\r\n    }   \r\n    \r\n    emit(eventName, arg) { // вызов этого события,   принимает тип события и доп.данные\r\n        if (this._events[eventName]) {   // посмотрим есть ли что вызывать\r\n        this._events[eventName].forEach((listener) => listener(arg)); // если есть то вызовем все функции с доп.данными\r\n        }\r\n    }\r\n}\r\n\r\nclass ItemTodo {\r\n    constructor(textInput) {\r\n        this.id = Date.now(); // рандомный и уникальный id\r\n        this.textItem = textInput;\r\n        this.status = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/view.js\n\r\n\r\nclass view_View extends Observer {\r\n    constructor() {\r\n        super(); // вызвать конструктор Observer\r\n\r\n        this._templateItem = document.getElementsByTagName("template")[0]. content.firstElementChild;\r\n        this._btnAddItem = document.getElementsByClassName("creator-item__btn-add")[0];\r\n        this._inputAddItem = document.getElementsByClassName("creator-item__input")[0];\r\n        this._listItem = document.getElementsByClassName("list__wrapper")[0];   \r\n        \r\n        // так как в обработчике используется this которое должно ссылаться на view а не на кнопку на которую назначен, \r\n        // используем .bind(this) для привязки контекста\r\n        this._btnAddItem.addEventListener("click", this.buttonAddClickHandler.bind(this)); \r\n    }\r\n\r\n    putListener(itemTodo) {\r\n        itemTodo.addEventListener("change", this.checkboxClickHandler.bind(this)); // используя всплывание, вешаем обработчик на сам элемент\r\n        itemTodo.querySelector(".item__btn-delete").addEventListener("click", this.buttonDeleteClickHandler.bind(this));\r\n        itemTodo.querySelector(".item__btn-change").addEventListener("click", this.buttonChangeClickHandler.bind(this));\r\n    }\r\n    \r\n    buttonAddClickHandler() {\r\n        const textInput = this._inputAddItem.innerText;\r\n\r\n        this._inputAddItem.innerText = "";\r\n        this._inputAddItem.focus();\r\n        if (!(textInput.trim() == "")) {   // проверка на пустую строку\r\n            this.emit("addView", textInput); // создаем событие и отправить текст  инпута в контролер \r\n        } \r\n    }\r\n\r\n    buttonDeleteClickHandler(evt) {\r\n        const idItemTodo = evt.target.parentElement.parentElement.dataset.id; // получить id элемента где была нажата кнопка\r\n        this.emit("deleteView", idItemTodo); // создаем событие и отправить id  элемента в контролер \r\n    }\r\n    \r\n    buttonChangeClickHandler(evt) {\r\n        const inputItem = evt.target.parentElement.previousElementSibling.firstElementChild; // получить поле ввода\r\n        const labelItem = inputItem.nextElementSibling;\r\n        const textItem = labelItem.lastElementChild;\r\n        const idItemTodo = evt.target.parentElement.parentElement.dataset.id; // получить id элемента где была нажата кнопка\r\n\r\n        if (evt.target.textContent == "Изменить") {  //проверка на состояние кнопки\r\n        inputItem.innerText = textItem.innerText;\r\n        labelItem.style.display = "none";\r\n        inputItem.style.display = "";\r\n        inputItem.focus(); // добавить фокус на поле ввода\r\n        evt.target.innerText = "Сохранить";\r\n        } else {\r\n            if ((textItem.innerText != inputItem.innerText) && (inputItem.innerText.trim() != "")){ \r\n                //проверка на изменения текста и пустую строку\r\n                const text = inputItem.innerText;\r\n                //const status = labelItem.firstElementChild.checked\r\n                this.emit("changeView", {idItemTodo, text}); //отправить изменения в контролер но не меняя их в DOM\r\n            }\r\n            labelItem.style.display = "";\r\n            inputItem.style.display = "none";\r\n            evt.target.innerText = "Изменить";\r\n        }\r\n    }\r\n\r\n    checkboxClickHandler(evt) {\r\n        const idItemTodo = evt.currentTarget.dataset.id; // получить id элемента где было поймано событие\r\n        const status = evt.target.checked\r\n    \r\n        this.emit("changeView", {idItemTodo, status}); //отправить изменения в контролер но не меняя их в DOM\r\n    }\r\n\r\n    changeItemTodo(item) {\r\n        const itemTodo = this._listItem.querySelector(`[data-id="${item.id}"]`); // используя шаблонные строки, содаем хитрый селектор для поиска элемента\r\n        \r\n        itemTodo.querySelector(".item__text p").innerText = item.textItem;\r\n        itemTodo.querySelector(".item__chek").checked = item.status; \r\n    }\r\n\r\n    renderItemTodo(objItemTodo) {\r\n        const cloneTemplate = this._templateItem.cloneNode(true); // глубокое копирование шаблона\r\n\r\n        cloneTemplate.dataset.id = objItemTodo.id; // указать id в атрибуте data-id\r\n        cloneTemplate.querySelector(".item__text p").innerText = objItemTodo.textItem;\r\n        cloneTemplate.querySelector(".item__chek").checked = objItemTodo.status;\r\n        this.putListener(cloneTemplate); // повесить обработчики\r\n        this._listItem.appendChild(cloneTemplate);\r\n    }\r\n\r\n    deleteItemTodo(id) {\r\n        const item = this._listItem.querySelector(`[data-id="${id}"]`); // используя шаблонные строки, содаем хитрый селектор для поиска элемента\r\n\r\n        item.classList.add("opacity");   //добавить класс с анимацией прозрачности\r\n        setTimeout(() => {this._listItem.removeChild(item)}, 400); // анимация прозрачности длиться 300мс, а элемент удалим через 400мс\r\n    }\r\n}\r\n\r\n/* harmony default export */ var view = (view_View);\n// CONCATENATED MODULE: ./src/model.js\nclass Model {\r\n    constructor() {\r\n        this._arrItemTodo = [];\r\n    }\r\n\r\n    addInArr(itemTodo) {\r\n        this._arrItemTodo.push(itemTodo);\r\n        return  this._arrItemTodo[this._arrItemTodo.length - 1]; // вернуть элемент после удачной записи в массив\r\n    }\r\n\r\n    deleteInArr(id) {                                                                   // метод findIndex() возвращает индекс в массиве, \r\n        const index = this._arrItemTodo.findIndex((item) => item.id == id);              // если элемент удовлетворяет условию проверяющей функции        \r\n        this._arrItemTodo.splice(index, 1); // удалить 1 элемент с места под индексом index\r\n        return true; //для подтверждения что запись удалена\r\n    }\r\n\r\n    changeInArr(item) {\r\n        const index = this._arrItemTodo.findIndex((itemArr) => itemArr.id == item.idItemTodo); // ищем индекс нужного объекта\r\n        \r\n        if (item.text) {\r\n            this._arrItemTodo[index].textItem = item.text; // если пришел текст то изменяем его в объекте\r\n        } else if (!(item.status == undefined)) {           // т.к в status передается булево значение, нужно сделать явную проверку\r\n            this._arrItemTodo[index].status = item.status;  // если пришел статус то изменяем его\r\n        }\r\n        return this._arrItemTodo[index]; //возвращаем измененный объект\r\n    }\r\n}\r\n\r\n/* harmony default export */ var model = (Model);\n// CONCATENATED MODULE: ./src/controller.js\n\r\n\r\nclass controller_Controller {\r\n    constructor(view, model) {\r\n        this._view = view;\r\n        this._model = model;\r\n        \r\n        // так как в обработчиках используется this которое должно ссылаться на Controller а не на view в котором будет вызываться, \r\n        // используем .bind(this) для привязки контекста\r\n        this._view.subscribe("addView", this.addItemTodo.bind(this)); // подписаться на событие из view\r\n        this._view.subscribe("deleteView", this.deleteItemTodo.bind(this)); \r\n        this._view.subscribe("changeView", this.changeItemTodo.bind(this));\r\n    }\r\n\r\n    addItemTodo(textInput) {\r\n        const itemTodo = new ItemTodo(textInput); // cоздать объект через класс из хелперсов\r\n        const itemOfModel = this._model.addInArr(itemTodo); //  попросить модель записать этот объект, метод возвращает этот же объект после записи\r\n        this._view.renderItemTodo(itemOfModel) ; // попрорсить представление отрисовать новый элемент\r\n    }\r\n\r\n    deleteItemTodo(id) {\r\n        const bool = this._model.deleteInArr(id);  //  попросить модель удалить этот объект у себя\r\n        if (bool) this._view.deleteItemTodo(id) ; // если успешно удалено в модели, то попрорсить представление отрисовать новый элемент\r\n    }\r\n\r\n    changeItemTodo(item) {\r\n        const newItem = this._model.changeInArr(item); //  попросить модель изменить этот объект у себя, метод возвращает измененныый объект\r\n        this._view.changeItemTodo(newItem); // попрорсить представление изменить элемент\r\n    }\r\n}\r\n\r\n/* harmony default export */ var controller = (controller_Controller);\n// CONCATENATED MODULE: ./src/scriptIndex.js\n\r\n\r\n\r\n\r\nconst scriptIndex_view = new view;\r\nconst scriptIndex_model = new model;\r\nconst scriptIndex_controller = new controller(scriptIndex_view, scriptIndex_model);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);